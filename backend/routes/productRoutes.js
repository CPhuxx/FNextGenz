const express = require("express");
const axios = require("axios");
const router = express.Router();

const BYSHOP_API_KEY = process.env.BYSHOP_API_KEY; // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î API Key ‡∏à‡∏≤‡∏Å .env

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Key ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å .env ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if (!BYSHOP_API_KEY) {
  console.error("‚ùå ERROR: BYSHOP_API_KEY is missing! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env");
} else {
  console.log("‚úÖ BYSHOP_API_KEY Loaded Successfully:", BYSHOP_API_KEY);
}

// ‚úÖ **API Proxy ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å ByShop**
router.get("/", async (req, res) => {
  console.log("üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å ByShop...");

  let retryCount = 0;
  const maxRetries = 3;

  while (retryCount < maxRetries) {
    try {
      const response = await axios.get("https://byshop.me/api/product", {
        headers: { "Content-Type": "application/json" },
        params: { keyapi: BYSHOP_API_KEY }, // ‚úÖ ‡∏™‡πà‡∏á API Key ‡∏ú‡πà‡∏≤‡∏ô params
        timeout: 10000,
      });

      console.log("üì• API Response:", response.data);

      if (response.data && response.data.status === "success" && Array.isArray(response.data.products)) {
        console.log("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        return res.json({ status: "success", products: response.data.products });
      } else {
        console.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ:", response.data);
        return res.status(400).json({
          status: "error",
          message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API",
          error: response.data,
        });
      }
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${retryCount + 1}/${maxRetries}:`, error.message);

      retryCount++;
      if (retryCount >= maxRetries) {
        return res.status(500).json({
          status: "error",
          message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (API ‡∏≠‡∏≤‡∏à‡∏•‡πà‡∏°)",
          error: error?.response?.data || error.message,
        });
      }

      // üîÅ **Retry ‡∏ñ‡πâ‡∏≤ Fetch ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)**
      await new Promise((resolve) => setTimeout(resolve, 5000));
    }
  }
});

// ‚úÖ **API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**
router.post("/update-price", async (req, res) => {
  const { appId, price } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!appId || isNaN(price) || price <= 0) {
    return res.status(400).json({ status: "error", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  console.log(`üì¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${appId} ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤: ${price}`);

  let retryCount = 0;
  const maxRetries = 3;

  while (retryCount < maxRetries) {
    try {
      const response = await axios.post("https://byshop.me/api/product/update", {
        keyapi: BYSHOP_API_KEY,  // ‡∏™‡πà‡∏á API Key ‡∏ú‡πà‡∏≤‡∏ô body
        id: appId,
        price: price,
      });

      console.log("üì• API Response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤:", response.data);

      if (response.data.status === "success") {
        console.log("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        return res.json({ status: "success", message: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï" });
      } else {
        console.error("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);
        return res.status(400).json({
          status: "error",
          message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API",
          error: response.data,
        });
      }
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${retryCount + 1}/${maxRetries}:`, error.message);

      retryCount++;
      if (retryCount >= maxRetries) {
        return res.status(500).json({
          status: "error",
          message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤ (API ‡∏≠‡∏≤‡∏à‡∏•‡πà‡∏°)",
          error: error?.response?.data || error.message,
        });
      }

      // üîÅ **Retry ‡∏ñ‡πâ‡∏≤ API ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)**
      await new Promise((resolve) => setTimeout(resolve, 5000));
    }
  }
});

module.exports = router;
